@using HE.Investments.Common.WWW.Components.PageHeader
@using HE.Investment.AHP.WWW.Routing
@using HE.Investments.Common.Extensions
@using HE.Investments.Common.WWW.Components.ApplicationStatusTagComponent
@using HE.Investments.Common.WWW.Components.ListCard
@using HE.Investments.Common.WWW.Components.ListCardExtended
@using HE.Investments.Common.WWW.Extensions
@model HE.Investment.AHP.Contract.Project.ProjectDetailsModel

@functions {

    private ListCardModel CreateApplicationsListCardModel()
    {
        var applications = Model.Applications.Items.Select(x =>
                new ListCardItemModel(
                    x.Name,
                    new DynamicComponentViewModel(nameof(ApplicationStatusTagComponent), new { applicationStatus = x.Status, additionalClasses = "application-status-project-list-govuk-tag" }),
                    Url.OrganisationAction("TaskList", "Application", new { applicationId = x.Id.Value })!))
            .ToList();

        var description = applications.IsEmpty()
            ? "Your applications will appear here once added."
            : "This includes applications awaiting decision, not approved or pending approval.";

        var applicationsListCardModel = new ListCardModel(
            Model.ProgrammeName,
            applications,
            "Applications",
            description,
            "View all applications",
            applications.Any() ? Url.OrganisationAction("Applications", "Project", new { projectId = Model.ProjectId }) : null,
            3);
        return applicationsListCardModel;
    }

    private ListCardModel CreateAllocationListCardModel()
    {
        var allocations = Model.Allocations.Items.Select(x =>
                new ListCardItemModel(
                    x.Name,
                    null,
                    Url.OrganisationAction("Overview", "Allocation", new { allocationId = x.Id })!))
            .ToList();

        var allocationListCardModel = new ListCardModel(
            Model.ProgrammeName,
            allocations,
            "Allocations",
            "This includes allocations that have been approved for funding or have received funding.",
            "View all allocations",
            allocations.Any() ? Url.OrganisationAction("Allocations", "Project", new { projectId = Model.ProjectId }) : null,
            3);

        return allocationListCardModel;
    }
}

@{
    var title = Model.ProjectName;
    ViewData["Title"] = title;
    var organisationId = Context.Request.RouteValues["organisationId"]?.ToString();
    var projectId = Context.Request.RouteValues["projectId"]?.ToString();

    ViewBag.Breadcrumbs = AhpBreadcrumbsBuilder
        .Empty(organisationId)
        .WithOrganisations()
        .WithOrganisation(Model.OrganisationName)
        .WithProjectsList()
        .WithProjectDetails(Model.ProjectName, projectId!)
        .Build();
}
<div class="govuk-grid-column-full govuk-!-margin-top-6">
    <vc:page-header title="@title" caption="@Model.OrganisationName"/>

    <gds-div-grid-column-two-thirds class="govuk-!-padding-left-0">
        @{
            var applicationsListCardModel = CreateApplicationsListCardModel();
            var allocationListCardModel = CreateAllocationListCardModel();
            var listModels = new List<ListCardModel> { applicationsListCardModel };

            if (allocationListCardModel.Items.Count > 0)
            {
                listModels.Add(allocationListCardModel);
            }

            <vc:list-card-extended model=@listModels></vc:list-card-extended>
        }
    </gds-div-grid-column-two-thirds>

    @await Html.PartialAsync("Partials/_ProjectStartAppAndViewSites", (Model.ProgrammeName, Model.ProjectId.Value, Model.IsReadOnly))
</div>
