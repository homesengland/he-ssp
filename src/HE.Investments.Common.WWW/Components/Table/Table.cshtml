@using HE.Investments.Common.WWW.Components.Table
@model (IList<TableHeaderViewModel> Headers, IList<TableRowViewModel> Rows)

@{
    string GetWidthClass(CellWidth width) => width switch
    {
        CellWidth.OneHalf => "govuk-!-width-one-half",
        CellWidth.OneThird => "govuk-!-width-one-third",
        CellWidth.OneQuarter => "govuk-!-width-one-quarter",
        CellWidth.OneFifth => "govuk-!-width-one-fifth",
        CellWidth.OneSixth => "govuk-!-width-one-sixth",
        CellWidth.OneEighth => "govuk-!-width-one-eighth",
        CellWidth.Undefined => string.Empty,
        _ => throw new ArgumentOutOfRangeException(nameof(width), width, null),
    };
}

<table class="govuk-table">
    <thead class="govuk-table__head">
    <tr class="govuk-table__row">
        @foreach (var header in Model.Headers)
        {
            if (header.IsDisplayed)
            {
                var headerClass = $"govuk-table__header";
                headerClass += $" {GetWidthClass(header.Width)}";
                headerClass += header.IsHidden ? " govuk-table__header--hidden" : string.Empty;
                <th scope="col" class="@headerClass">@header.Title</th>
            }
        }
    </tr>
    </thead>
    <tbody class="govuk-table__body">
    @foreach (var row in Model.Rows)
    {
        <tr class="govuk-table__row">
            @foreach (var value in row.Values)
            {
                @if (value.IsDisplayed)
                {
                    <td class="govuk-table__cell">
                        @if (value.Component != null)
                        {
                            <vc:dynamic-component
                                component="@value.Component"/>
                        }
                        else
                        {
                            @(value.Value ?? "-")
                        }
                    </td>
                }
            }
        </tr>
    }
    </tbody>
</table>
