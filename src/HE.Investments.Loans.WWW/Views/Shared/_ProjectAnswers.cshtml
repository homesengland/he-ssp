@using HE.Investments.Common.Contract.Constants;
@using HE.Investments.Common.WWW.Helpers
@using HE.Investments.Loans.Common.Utils.Constants.FormOption
@using HE.Investments.Loans.WWW.Extensions
@using HE.Investments.Loans.WWW.Helpers
@using HE.Investments.Loans.WWW.Models
@using HE.Investments.Loans.WWW.Views.Project.Consts
@using He.AspNetCore.Mvc.Gds.Components.TagHelpers.Summary
@model HE.Investments.Loans.Contract.Projects.ViewModels.ProjectViewModel;
@{
    var id = ViewContext.RouteData.Values["id"];
    var typeHomesList = new List<string>();

    if (Model?.HomeTypes != null)
    {
        foreach (var typeHome in Model.HomeTypes)
        {
            if (typeHome != "other")
            {
                typeHomesList.Add(typeHome);
            }
        }
    }
    if (!string.IsNullOrEmpty(Model?.OtherHomeTypes))
    {
        typeHomesList.Add(Model.OtherHomeTypes);
    }

    var grantFundingMore = new List<string>();

    if (Model?.GrantFundingProviderName != null)
    {
        grantFundingMore.Add($"Previous funding: {Model.GrantFundingProviderName}");
        grantFundingMore.Add($"Amount: {MoneyLabelHelper.Pounds(Model.GrantFundingAmount)}");
        grantFundingMore.Add($"Name of the grant/found: {Model.GrantFundingName}");
        grantFundingMore.Add($"It was for: {Model.GrantFundingPurpose}");
    }

    var additionalProjectDetails = new List<string>();

    if (Model?.Cost != null)
    {
        var purchaseDate = DateHelper.ConvertToDateString(Model.PurchaseDay, Model.PurchaseMonth, Model.PurchaseYear);
        additionalProjectDetails.Add($"Purchased: {purchaseDate}");
        additionalProjectDetails.Add($"Purchase cost: {MoneyLabelHelper.Pounds(Model.Cost)}");
        additionalProjectDetails.Add($"Current value: {MoneyLabelHelper.Pounds(Model.Value)}");
        additionalProjectDetails.Add($"Source: {FormOption.SiteAdditionalSource.GetSummaryLabel(Model.Source)}");
    }
}

<gds-summary-list class="govuk-!-margin-bottom-9">

    @await Html.PartialAsync("_CheckAnswersRow", new ViewDataDictionary(ViewData)
           {
               { "Title", ProjectFieldNames.Name },
               { "Value", Model?.ProjectName },
               { "Link", Url.Action("ProjectName", "Project", new { id = id, projectId = Model.ProjectId, redirect = "CheckAnswers" }) },
               { "LinkId", "name" },
               { "IsEditable", Model?.IsEditable() }
           })

    @await Html.PartialAsync("_CheckAnswersRow", new ViewDataDictionary(ViewData)
           {
               { "Title", ProjectFieldNames.StartDate },
               {
                   "Value", DateHelper.ConvertToDateStringWithDescription(
                       Model?.EstimatedStartDay, Model?.EstimatedStartMonth,
                       Model?.EstimatedStartYear, Model?.HasEstimatedStartDate)
               },
               { "Link", Url.Action("StartDate", "Project", new { id = id, projectId = Model.ProjectId, redirect = "CheckAnswers" }) },
               { "LinkId", "start-date" },
               { "IsEditable", Model?.IsEditable() }
           })

    @await Html.PartialAsync("_CheckAnswersRow", new ViewDataDictionary(ViewData)
           {
               { "Title", ProjectFieldNames.ManyHomes },
               { "Value", Model?.HomesCount },
               { "Link", Url.Action("ManyHomes", "Project", new { id = id, projectId = Model.ProjectId, redirect = "CheckAnswers" }) },
               { "LinkId", "number-of-homes" },
               { "IsEditable", Model?.IsEditable() }
           })

    @await Html.PartialAsync("_CheckAnswersRow", new ViewDataDictionary(ViewData)
           {
               { "Title", ProjectFieldNames.TypeHomes },
               { "Value", FormOption.SiteTypeHomesCheckbox.GetSummaryLabel(typeHomesList) },
               { "Link", Url.Action("TypeHomes", "Project", new { id = id, projectId = Model.ProjectId, redirect = "CheckAnswers" }) },
               { "LinkId", "homes-type" },
               { "IsEditable", Model?.IsEditable() }
           })

    @await Html.PartialAsync("_CheckAnswersRow", new ViewDataDictionary(ViewData)
           {
               { "Title", ProjectFieldNames.ProjectType },
               { "Value", FormOption.SiteType.GetSummaryLabel(Model?.ProjectType) },
               { "Link", Url.Action("Type", "Project", new { id = id, projectId = Model.ProjectId, redirect = "CheckAnswers" }) },
               { "LinkId", "project-type" },
               { "IsEditable", Model?.IsEditable() }
           })

    @await Html.PartialAsync("_CheckAnswersRow", new ViewDataDictionary(ViewData)
           {
               { "Title", ProjectFieldNames.PlanningReferenceNumberExists },
               { "Value", Model?.PlanningReferenceNumberExists },
               { "Link", Url.Action("PlanningReferenceNumberExists", "Project", new { id = id, projectId = Model.ProjectId, redirect = "CheckAnswers" }) },
               { "LinkId", "reference-number-exists" },
               { "IsEditable", Model?.IsEditable() }
           })

    @if (Model.PlanningReferenceNumberExists == CommonResponse.Yes)
    {
        @await Html.PartialAsync("_CheckAnswersRow", new ViewDataDictionary(ViewData)
               {
                   { "Title", ProjectFieldNames.PlanningReferenceNumber },
                   { "Value", Model?.PlanningReferenceNumber },
                   { "Link", Url.Action("PlanningReferenceNumber", "Project", new { id = id, projectId = Model.ProjectId, redirect = "CheckAnswers" }) },
                   { "LinkId", "reference-number" },
                   { "IsEditable", Model?.IsEditable() }
               })

        @await Html.PartialAsync("_CheckAnswersRow", new ViewDataDictionary(ViewData)
               {
                   { "Title", ProjectFieldNames.PlanningPermissionStatus },
                   { "Value", FormOption.PermissionStatus.GetSummaryLabel(Model?.PlanningPermissionStatus) },
                   { "Link", Url.Action("PlanningPermissionStatus", "Project", new { id = id, projectId = Model.ProjectId, redirect = "CheckAnswers" }) },
                   { "LinkId", "planning-permission-status" },
                   { "IsEditable", Model?.IsEditable() }
               })
    }

    @if (Model.LocationOption == null || Model.LocationOption == "coordinates")
    {
        @await Html.PartialAsync("_CheckAnswersRow", new ViewDataDictionary(ViewData)
               {
                   { "Title", ProjectFieldNames.Coordinates },
                   { "Value", Model?.LocationCoordinates },
                   { "Link", Url.Action("Location", "Project", new { id = id, projectId = Model.ProjectId, redirect = "CheckAnswers" }) },
                   { "LinkId", "coordinates" },
                   { "IsEditable", Model?.IsEditable() }
               })
    }

    @if (Model.LocationOption == null || Model.LocationOption == "landRegistryTitleNumber")
    {
        @await Html.PartialAsync("_CheckAnswersRow", new ViewDataDictionary(ViewData)
               {
                   { "Title", ProjectFieldNames.LandRegistryTitleNumber },
                   { "Value", Model?.LocationLandRegistry },
                   { "Link", Url.Action("Location", "Project", new { id = id, projectId = Model.ProjectId, redirect = "CheckAnswers" }) },
                   { "LinkId", "land-registry-title-number" },
                   { "IsEditable", Model?.IsEditable() }
               })
    }


    @await Html.PartialAsync("_CheckAnswersRow", new ViewDataDictionary(ViewData)
           {
               { "Title", ProjectFieldNames.LocalAuthority },
               { "Value", Model?.LocalAuthorityName },
               { "Link", Url.Action("LocalAuthoritySearch", "Project", new { id = id, projectId = Model.ProjectId, redirect = "CheckAnswers" }) },
               { "LinkId", "local-authority" },
               { "IsEditable", Model?.IsEditable() }
           })

    @await Html.PartialAsync("_CheckAnswersRow", new ViewDataDictionary(ViewData)
           {
               { "Title", ProjectFieldNames.LandOwnership },
               { "Value", Model?.Ownership },
               { "Link", Url.Action("Ownership", "Project", new { id = id, projectId = Model.ProjectId, redirect = "CheckAnswers" }) },
               { "LinkId", "ownership" },
               { "IsEditable", Model?.IsEditable() }
           })

    @if (Model.Ownership == "Yes")
    {
        @await Html.PartialAsync("_CheckAnswersRow", new ViewDataDictionary(ViewData)
               {
                   { "Title", ProjectFieldNames.AdditionalDetails },
                   { "Value", additionalProjectDetails },
                   { "Link", Url.Action("AdditionalDetails", "Project", new { id = id, projectId = Model.ProjectId, redirect = "CheckAnswers" }) },
                   { "LinkId", "additional-details" },
                   { "IsEditable", Model?.IsEditable() }
               })
    }


    @await Html.PartialAsync("_CheckAnswersRow", new ViewDataDictionary(ViewData)
           {
               { "Title", ProjectFieldNames.GrantFundingExists },
               { "Value", FormOption.GrantFunding.GetSummaryLabel(Model?.GrantFundingStatus) },
               { "Link", Url.Action("GrantFundingExists", "Project", new { id = id, projectId = Model.ProjectId, redirect = "CheckAnswers" }) },
               { "LinkId", "grant-funding-exists" },
               { "IsEditable", Model?.IsEditable() }
           })

    @if (Model.GrantFundingStatus == "Yes")
    {
        @await Html.PartialAsync("_CheckAnswersRow", new ViewDataDictionary(ViewData)
               {
                   { "Title", ProjectFieldNames.GrantFunding },
                   { "Value", grantFundingMore },
                   { "Link", Url.Action("GrantFunding", "Project", new { id = id, projectId = Model.ProjectId, redirect = "CheckAnswers" }) },
                   { "LinkId", "grant-funding" },
                   { "IsEditable", Model?.IsEditable() }
               })
    }


    @await Html.PartialAsync("_CheckAnswersRow", new ViewDataDictionary(ViewData)
           {
               { "Title", ProjectFieldNames.ChargesDebt },
               { "Value", !string.IsNullOrEmpty(Model?.ChargesDebtInfo) ? $"{ Model.ChargesDebt }, { Model.ChargesDebtInfo }" :  Model?.ChargesDebt },
               { "Link", Url.Action("ChargesDebt", "Project", new { id = id, projectId = Model.ProjectId, redirect = "CheckAnswers" }) },
               { "LinkId", "charges-debt" },
               { "IsEditable", Model?.IsEditable() }
           })

    @await Html.PartialAsync("_CheckAnswersRow", new ViewDataDictionary(ViewData)
           {
               { "Title", ProjectFieldNames.AffordableHomes },
               { "Value", Model?.AffordableHomes },
               { "Link", Url.Action("AffordableHomes", "Project", new { id = id, projectId = Model.ProjectId, redirect = "CheckAnswers" }) },
               { "LinkId", "affordable-homes" },
               { "IsEditable", Model?.IsEditable() }
           })

</gds-summary-list>
